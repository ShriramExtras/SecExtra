// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //
// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //
char *strrev(char *string)
{ // #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //
    if (string && *string)
    { // #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //
        char *b = string, *e = string + strlen(string) - 1; // #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
                                                            // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
                                                            //    files consistent.  Some systems have them there and some here, and some
                                                            //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //
        while (b < e)
        { // #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
            // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
            //    files consistent.  Some systems have them there and some here, and some
            //    software depends on the macros being defined without including both. //

            // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
            //    LEN is always relative to the current file position.
            //    The CMD argument is one of the following.

            //    This function is a cancellation point and therefore not marked with
            //    __THROW. //

            // # define F_ULOCK 0	//Unlock a previously locked region. //
            // # define F_LOCK  1	//Lock a region for exclusive use. //
            // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
            // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
            // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
            //    files consistent.  Some systems have them there and some here, and some
            //    software depends on the macros being defined without including both. //

            // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
            //    LEN is always relative to the current file position.
            //    The CMD argument is one of the following.

            //    This function is a cancellation point and therefore not marked with
            //    __THROW. //

            // # define F_ULOCK 0	//Unlock a previously locked region. //
            // # define F_LOCK  1	//Lock a region for exclusive use. //
            // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
            // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
            // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
            //    files consistent.  Some systems have them there and some here, and some
            //    software depends on the macros being defined without including both. //

            // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
            //    LEN is always relative to the current file position.
            //    The CMD argument is one of the following.

            //    This function is a cancellation point and therefore not marked with
            //    __THROW. //

            // # define F_ULOCK 0	//Unlock a previously locked region. //
            // # define F_LOCK  1	//Lock a region for exclusive use. //
            // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
            // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
            // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
            //    files consistent.  Some systems have them there and some here, and some
            //    software depends on the macros being defined without including both. //

            // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
            //    LEN is always relative to the current file position.
            //    The CMD argument is one of the following.

            //    This function is a cancellation point and therefore not marked with
            //    __THROW. //

            // # define F_ULOCK 0	//Unlock a previously locked region. //
            // # define F_LOCK  1	//Lock a region for exclusive use. //
            // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
            // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
            // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
            //    files consistent.  Some systems have them there and some here, and some
            //    software depends on the macros being defined without including both. //

            // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
            //    LEN is always relative to the current file position.
            //    The CMD argument is one of the following.

            //    This function is a cancellation point and therefore not marked with
            //    __THROW. //

            // # define F_ULOCK 0	//Unlock a previously locked region. //
            // # define F_LOCK  1	//Lock a region for exclusive use. //
            // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
            // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
            // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
            //    files consistent.  Some systems have them there and some here, and some
            //    software depends on the macros being defined without including both. //

            // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
            //    LEN is always relative to the current file position.
            //    The CMD argument is one of the following.

            //    This function is a cancellation point and therefore not marked with
            //    __THROW. //

            // # define F_ULOCK 0	//Unlock a previously locked region. //
            // # define F_LOCK  1	//Lock a region for exclusive use. //
            // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
            // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
            // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
            //    files consistent.  Some systems have them there and some here, and some
            //    software depends on the macros being defined without including both. //

            // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
            //    LEN is always relative to the current file position.
            //    The CMD argument is one of the following.

            //    This function is a cancellation point and therefore not marked with
            //    __THROW. //

            // # define F_ULOCK 0	//Unlock a previously locked region. //
            // # define F_LOCK  1	//Lock a region for exclusive use. //
            // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
            // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
            // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
            //    files consistent.  Some systems have them there and some here, and some
            //    software depends on the macros being defined without including both. //

            // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
            //    LEN is always relative to the current file position.
            //    The CMD argument is one of the following.

            //    This function is a cancellation point and therefore not marked with
            //    __THROW. //

            // # define F_ULOCK 0	//Unlock a previously locked region. //
            // # define F_LOCK  1	//Lock a region for exclusive use. //
            // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
            // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
            // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
            //    files consistent.  Some systems have them there and some here, and some
            //    software depends on the macros being defined without including both. //

            // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
            //    LEN is always relative to the current file position.
            //    The CMD argument is one of the following.

            //    This function is a cancellation point and therefore not marked with
            //    __THROW. //

            // # define F_ULOCK 0	//Unlock a previously locked region. //
            // # define F_LOCK  1	//Lock a region for exclusive use. //
            // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
            // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
            // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
            //    files consistent.  Some systems have them there and some here, and some
            //    software depends on the macros being defined without including both. //

            // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
            //    LEN is always relative to the current file position.
            //    The CMD argument is one of the following.

            //    This function is a cancellation point and therefore not marked with
            //    __THROW. //

            // # define F_ULOCK 0	//Unlock a previously locked region. //
            // # define F_LOCK  1	//Lock a region for exclusive use. //
            // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
            // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
            // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
            //    files consistent.  Some systems have them there and some here, and some
            //    software depends on the macros being defined without including both. //

            // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
            //    LEN is always relative to the current file position.
            //    The CMD argument is one of the following.

            //    This function is a cancellation point and therefore not marked with
            //    __THROW. //

            // # define F_ULOCK 0	//Unlock a previously locked region. //
            // # define F_LOCK  1	//Lock a region for exclusive use. //
            // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
            // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
            // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
            //    files consistent.  Some systems have them there and some here, and some
            //    software depends on the macros being defined without including both. //

            // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
            //    LEN is always relative to the current file position.
            //    The CMD argument is one of the following.

            //    This function is a cancellation point and therefore not marked with
            //    __THROW. //

            // # define F_ULOCK 0	//Unlock a previously locked region. //
            // # define F_LOCK  1	//Lock a region for exclusive use. //
            // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
            // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
            // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
            //    files consistent.  Some systems have them there and some here, and some
            //    software depends on the macros being defined without including both. //

            // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
            //    LEN is always relative to the current file position.
            //    The CMD argument is one of the following.

            //    This function is a cancellation point and therefore not marked with
            //    __THROW. //

            // # define F_ULOCK 0	//Unlock a previously locked region. //
            // # define F_LOCK  1	//Lock a region for exclusive use. //
            // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
            // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
            // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
            //    files consistent.  Some systems have them there and some here, and some
            //    software depends on the macros being defined without including both. //

            // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
            //    LEN is always relative to the current file position.
            //    The CMD argument is one of the following.

            //    This function is a cancellation point and therefore not marked with
            //    __THROW. //

            // # define F_ULOCK 0	//Unlock a previously locked region. //
            // # define F_LOCK  1	//Lock a region for exclusive use. //
            // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
            // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
            // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
            //    files consistent.  Some systems have them there and some here, and some
            //    software depends on the macros being defined without including both. //

            // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
            //    LEN is always relative to the current file position.
            //    The CMD argument is one of the following.

            //    This function is a cancellation point and therefore not marked with
            //    __THROW. //

            // # define F_ULOCK 0	//Unlock a previously locked region. //
            // # define F_LOCK  1	//Lock a region for exclusive use. //
            // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
            // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
            // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
            //    files consistent.  Some systems have them there and some here, and some
            //    software depends on the macros being defined without including both. //

            // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
            //    LEN is always relative to the current file position.
            //    The CMD argument is one of the following.

            //    This function is a cancellation point and therefore not marked with
            //    __THROW. //

            // # define F_ULOCK 0	//Unlock a previously locked region. //
            // # define F_LOCK  1	//Lock a region for exclusive use. //
            // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
            // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
            // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
            //    files consistent.  Some systems have them there and some here, and some
            //    software depends on the macros being defined without including both. //

            // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
            //    LEN is always relative to the current file position.
            //    The CMD argument is one of the following.

            //    This function is a cancellation point and therefore not marked with
            //    __THROW. //

            // # define F_ULOCK 0	//Unlock a previously locked region. //
            // # define F_LOCK  1	//Lock a region for exclusive use. //
            // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
            // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
            // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
            //    files consistent.  Some systems have them there and some here, and some
            //    software depends on the macros being defined without including both. //

            // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
            //    LEN is always relative to the current file position.
            //    The CMD argument is one of the following.

            //    This function is a cancellation point and therefore not marked with
            //    __THROW. //

            // # define F_ULOCK 0	//Unlock a previously locked region. //
            // # define F_LOCK  1	//Lock a region for exclusive use. //
            // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
            // # define F_TEST  3	//Test a region for other processes locks. //
            char t = *b; // #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
                         // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
                         //    files consistent.  Some systems have them there and some here, and some
                         //    software depends on the macros being defined without including both. //

            // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
            //    LEN is always relative to the current file position.
            //    The CMD argument is one of the following.

            //    This function is a cancellation point and therefore not marked with
            //    __THROW. //

            // # define F_ULOCK 0	//Unlock a previously locked region. //
            // # define F_LOCK  1	//Lock a region for exclusive use. //
            // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
            // # define F_TEST  3	//Test a region for other processes locks. //
            *b++ = *e; // #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
                       // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
                       //    files consistent.  Some systems have them there and some here, and some
                       //    software depends on the macros being defined without including both. //

            // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
            //    LEN is always relative to the current file position.
            //    The CMD argument is one of the following.

            //    This function is a cancellation point and therefore not marked with
            //    __THROW. //

            // # define F_ULOCK 0	//Unlock a previously locked region. //
            // # define F_LOCK  1	//Lock a region for exclusive use. //
            // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
            // # define F_TEST  3	//Test a region for other processes locks. //
            *e-- = t; // #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
                      // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
                      //    files consistent.  Some systems have them there and some here, and some
                      //    software depends on the macros being defined without including both. //

            // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
            //    LEN is always relative to the current file position.
            //    The CMD argument is one of the following.

            //    This function is a cancellation point and therefore not marked with
            //    __THROW. //

            // # define F_ULOCK 0	//Unlock a previously locked region. //
            // # define F_LOCK  1	//Lock a region for exclusive use. //
            // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
            // # define F_TEST  3	//Test a region for other processes locks. //
        } // #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
          // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
          //    files consistent.  Some systems have them there and some here, and some
          //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //
    } // #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
      // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
      //    files consistent.  Some systems have them there and some here, and some
      //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //
    return string;
} // #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //

char encrypt_string(char *string)
{ // #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //
    char *ptr = string; // #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
                        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
                        //    files consistent.  Some systems have them there and some here, and some
                        //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //
    int i = 0; // #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
               // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
               //    files consistent.  Some systems have them there and some here, and some
               //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //
    while (string[i] != '\0')
    { // #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //
        *ptr = *ptr + 1; // #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
                         // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
                         //    files consistent.  Some systems have them there and some here, and some
                         //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //
        ptr++; // #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
               // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
               //    files consistent.  Some systems have them there and some here, and some
               //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //
        i++; // #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
             // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
             //    files consistent.  Some systems have them there and some here, and some
             //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //
    }
    // #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //
    strrev(string); // #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //
}
// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //vv
char decrypt_string(char *string)
{ // #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //v
    char *ptr = string; // #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
                        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
                        //    files consistent.  Some systems have them there and some here, and some
                        //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //
    int i = 0; // #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
               // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
               //    files consistent.  Some systems have them there and some here, and some
               //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //
    strrev(string); // #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
                    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
                    //    files consistent.  Some systems have them there and some here, and some
                    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //
    while (string[i] != '\0')
    { // #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //
        *ptr = *ptr - 1; // #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
                         // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
                         //    files consistent.  Some systems have them there and some here, and some
                         //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //
        ptr++; // #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
               // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
               //    files consistent.  Some systems have them there and some here, and some
               //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //
        i++; // #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
             // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
             //    files consistent.  Some systems have them there and some here, and some
             //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
        // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
        //    files consistent.  Some systems have them there and some here, and some
        //    software depends on the macros being defined without including both. //

        // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
        //    LEN is always relative to the current file position.
        //    The CMD argument is one of the following.

        //    This function is a cancellation point and therefore not marked with
        //    __THROW. //

        // # define F_ULOCK 0	//Unlock a previously locked region. //
        // # define F_LOCK  1	//Lock a region for exclusive use. //
        // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
        // # define F_TEST  3	//Test a region for other processes locks. //v
    } // #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
    // //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
    //    files consistent.  Some systems have them there and some here, and some
    //    software depends on the macros being defined without including both. //

    // //`lockf' is a simpler interface to the locking facilities of `fcntl'.
    //    LEN is always relative to the current file position.
    //    The CMD argument is one of the following.

    //    This function is a cancellation point and therefore not marked with
    //    __THROW. //

    // # define F_ULOCK 0	//Unlock a previously locked region. //
    // # define F_LOCK  1	//Lock a region for exclusive use. //
    // # define F_TLOCK 2	//Test and lock a region for exclusive use. //
    // # define F_TEST  3	//Test a region for other processes locks. //
} // #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //// #if (defined __USE_MISC || defined __USE_XOPEN_EXTENDED) && !defined F_LOCK
// //NOTE: These declarations also appear in <fcntl.h>; be sure to keep both
//    files consistent.  Some systems have them there and some here, and some
//    software depends on the macros being defined without including both. //

// //`lockf' is a simpler interface to the locking facilities of `fcntl'.
//    LEN is always relative to the current file position.
//    The CMD argument is one of the following.

//    This function is a cancellation point and therefore not marked with
//    __THROW. //

// # define F_ULOCK 0	//Unlock a previously locked region. //
// # define F_LOCK  1	//Lock a region for exclusive use. //
// # define F_TLOCK 2	//Test and lock a region for exclusive use. //
// # define F_TEST  3	//Test a region for other processes locks. //
